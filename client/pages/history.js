import { useEffect,useState , useRef} from "react";
import Head from "next/head";
import TopNav from "../components/TopNav";
import Footer from "../components/Footer";
import StatCard from "../components/StatCard";
import AccessAlarmsIcon from "@mui/icons-material/AccessAlarms";
import SessionTab from "../components/SessionTab";
import AlarmOnIcon from "@mui/icons-material/AlarmOn";
import MoreTimeIcon from "@mui/icons-material/MoreTime";
import TimelapseIcon from "@mui/icons-material/Timelapse";
import AdjustIcon from "@mui/icons-material/Adjust";
import Loader from "../components/Loader";

import { db } from "./firebase-config";
import { getDocs, collection } from "firebase/firestore";

var options = { year: 'numeric', month: 'long', day: 'numeric' };
var date  = new Date();

const history = () => {

  const [data, setData] = useState([]);

  const today = useRef(0);
  const todayTotal = useRef(0);
  const allTime = useRef(0);
  const allTimeTotal = useRef(0);

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    try {
      const fetchSessions = async () => {
        const colRef = collection(
          db,
          "userdata",
          "htGFyJkRsiOT9IG3I9xY9Qcsj6N2",
          "sessions"
        );
        const querySnapshot = await getDocs(colRef);
        const filterData = async (querySnapshot)=>{
          querySnapshot.forEach((doc) => {
            if(doc.data().sessionDate === date.toLocaleDateString("en-US", options)){
              today.current= today.current+1;
              todayTotal.current = todayTotal.current + doc.data().focusTime;
            }
            allTime.current = allTime.current +1;
            allTimeTotal.current = allTimeTotal.current + doc.data().focusTime;
            setData(prevItem => [...prevItem , doc.data()])
          });
        }
        await filterData(querySnapshot);
        setIsLoading(false);
      };

      fetchSessions();
    } catch (error) {
        alert(error);
    }
  }, []);


  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-br from-gray-700 via-gray-900 to-black justify-start items-center">
      <Head>
        <title>PomoFocus</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="w-full">
        <TopNav />
      </header>
      <div className="min-h-screen w-full flex flex-col justify-center items-center">
      {isLoading ? <Loader/> : (
      <div className="min-h-screen w-full flex flex-col justify-start sml:p-6 items-center">
      <div className="grid mid:grid-cols-2 p-6 sml:p-0 sml:grid-cols-2 gap-6 lar:w-3/5 mid:w-4/5 w-full">
        <StatCard
          title="Today's Focus"
          value={today.current}
          icon={
            <AdjustIcon
              sx={{
                width: 35,
                height: 35,
                color: "white",
              }}
            />
          }
        />
        <StatCard
          title="Today's Focus Time"
          value={`${Math.floor(todayTotal.current / 60)} mins`}
          icon={
            <AlarmOnIcon
              sx={{
                width: 35,
                height: 35,
                color: "white",
              }}
            />
          }
        />
        <StatCard
          title="Total Focus"
          value={allTime.current}
          icon={
            <TimelapseIcon
              sx={{
                width: 35,
                height: 35,
                color: "white",
              }}
            />
          }
        />
        <StatCard
          title="Total Focus Time"
          value={`${Math.floor(allTimeTotal.current / 60)} mins`}
          icon={
            <MoreTimeIcon
              sx={{
                width: 35,
                height: 35,
                color: "white",
              }}
            />
          }
        />
      </div>
      <div className="lar:w-3/5 mid:w-4/5 w-full flex justify-start items-center py-6 flex-col">
        <div className="flex flex-col w-full justify-center items-center ">
          <p className="bg-gradient-to-r  mb-4 mt-2 font-semibold from-fuchsia-500 via-red-600 to-orange-400 bg-clip-text text-transparent text-xl font-kumbh tracking-widest whitespace-nowrap">
            SESSIONS
          </p>
          <div className="grid grid-cols-5 p-2 w-full sml:p-4 sml:my-0 my-2 text-white firefox:bg-opacity-60  bg-opacity-20 backdrop-filter backdrop-blur-sm rounded-md  bg-white">
            <div className="col-span-3 justify-center items-center  flex">
              <p className="">#</p>
              <p className="flex-1 justify-center flex">DATE</p>
            </div>
            <div className="col-span-1  justify-center text-center items-center flex">
              <p className="hidden sml:block">FOCUS</p>
              <div className="sml:hidden block">
                <AlarmOnIcon />
              </div>
            </div>
            <div className="col-span-1 justify-center text-center items-center flex">
              <p className="hidden sml:block">SESSION</p>
              <div className="sml:hidden block">
                <AccessAlarmsIcon />
              </div>
            </div>
          </div>
        </div>
        {data.map((item, index)=>{
          return(<SessionTab key={index} index={index+1} item={item} />)
        })}
      </div>
    </div>
)}
      </div>
      <footer className="w-10/12">
        <Footer />
      </footer>
    </div>
  );
};

export default history;
